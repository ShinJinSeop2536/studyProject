오프젝트와 의존관계
1.	초남감 DAO
2.	DAO의 분리 
소프트웨어 개발에서 끝이란 개념은 없다. 사용자의 비즈니스 프로세스와 그에 따른 요구사황을 끊임없이 바뀌고 발전한다. 애플리케이션이 기반을 두고 있는 기술도 시간이 지남에 따라 바뀌고, 운영되는 환경도 병환한다. 애플리케이션이 더 이상 사용되지 않아 폐기처분될 때가 돼야 변화는 중지된다.
	그래서 개발자가 객체를 설계할 떄 가장 염두에 둬야 할 사항은 바로 미래 변화를 어떻게 대비할 것인가이다. 지혜로운 개발자는 오늘 이 시간에 미래를 위해 설계하고 개발한다. 그로 인해 발생하는 갈등을 최소화할 수 있다.
객체지향 설계와 프로그래밍 이전의 절차적 프로그래밍 패러다임에 비해 초기에 좀 더 많은, 번거로 운 작업을 요구하는 이유는 객체지향 기술 자체가 지니는, 변화에 효과적으로 대처할 수 있다는 기술적인 특징 때문이다. 실세계와 최대한 가깝게 모델링해낼 수 있기 때문에 의미가 있다. 하지만 그보다는 객체지향 기술이 만들어내는 가상의 추상세계 자체를 효과적으로 수정할 수 있고, 이를 자유롭고 편리하게 변경, 발전, 확장시킬 수 있다는 데 더 의미가 있다.
미래를 준비하는데 있어서 가장 중요한 과제는 변화의 폭을 최소한으로 줄여주는 것이다.
그러면 어떻게 변경이 일어날 때 필요한 작업을 최소화하고， 그 변경이 다른 곳에 문 제를 일으키지 않게 할 수 있었을까? 그것은 분리와 확장을 고려한 설계가 있었기 때문이다. 
프로그래밍의 기초 개념에 중에 관심사의 분리라는 게 있다. 이를 객체지향에 적용해보면, 관심이 같은 것끼리는 하나의 객체 안으로 또는 친한 객체로 모이게 하고, 관심이 다른 것은 가능한 하 따로 떨어져서 서로 영햐을 주지 않도록 분리하는 것이라고 생각할 수 있다.

