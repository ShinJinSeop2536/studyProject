오프젝트와 의존관계
1.	초남감 DAO
2.	DAO의 분리 
소프트웨어 개발에서 끝이란 개념은 없다. 사용자의 비즈니스 프로세스와 그에 따른 요구사황을 끊임없이 바뀌고 발전한다. 애플리케이션이 기반을 두고 있는 기술도 시간이 지남에 따라 바뀌고, 운영되는 환경도 병환한다. 애플리케이션이 더 이상 사용되지 않아 폐기처분될 때가 돼야 변화는 중지된다.
	그래서 개발자가 객체를 설계할 떄 가장 염두에 둬야 할 사항은 바로 미래 변화를 어떻게 대비할 것인가이다. 지혜로운 개발자는 오늘 이 시간에 미래를 위해 설계하고 개발한다. 그로 인해 발생하는 갈등을 최소화할 수 있다.
객체지향 설계와 프로그래밍 이전의 절차적 프로그래밍 패러다임에 비해 초기에 좀 더 많은, 번거로 운 작업을 요구하는 이유는 객체지향 기술 자체가 지니는, 변화에 효과적으로 대처할 수 있다는 기술적인 특징 때문이다. 실세계와 최대한 가깝게 모델링해낼 수 있기 때문에 의미가 있다. 하지만 그보다는 객체지향 기술이 만들어내는 가상의 추상세계 자체를 효과적으로 수정할 수 있고, 이를 자유롭고 편리하게 변경, 발전, 확장시킬 수 있다는 데 더 의미가 있다.
미래를 준비하는데 있어서 가장 중요한 과제는 변화의 폭을 최소한으로 줄여주는 것이다.
그러면 어떻게 변경이 일어날 때 필요한 작업을 최소화하고， 그 변경이 다른 곳에 문 제를 일으키지 않게 할 수 있었을까? 그것은 분리와 확장을 고려한 설계가 있었기 때문이다. 
프로그래밍의 기초 개념에 중에 관심사의 분리라는 게 있다. 이를 객체지향에 적용해보면, 관심이 같은 것끼리는 하나의 객체 안으로 또는 친한 객체로 모이게 하고, 관심이 다른 것은 가능한 하 따로 떨어져서 서로 영햐을 주지 않도록 분리하는 것이라고 생각할 수 있다.
3.	커넥션 만들기의 추출
UserDao의 관심사항
1.	첫쨰는 DB와 연결을 위한 커넥션을 어떻게 가져올까라는 관심이다. 더 세분화해서 어떤 DB를 쓰고, 어떤 두라이버를 사용할 것이고, 어떤 로그인 정보를 쓰는데, 그 커넥션을 생성하는 방법은 또 어떤 것이다라는 것까지 구분해서 볼 수도 있다.
2.	둘쨰는 사용자 등록을 위해 DB에 보낼 SQL 문장응을 담을 Statement를 만들고 실행하는 것이다.
3.	셋쨰는 작업이 끝나면 사용한 리소스인 Statement와 Connection 오브젝트를 닫아줘서 소중항 공유 리소스를 시스템에 돌려주는 것이다.
UserDao는 현재 초난감 상태이므로 예외사황에 대한 처리가 전혀 없다. 수많은 동시 사용자가 있고 한번 시작되면 장기간 운용되는 서버에 올라간다면 예외상황에 적절하게 대응 해야 고유 리소를 반환하지 않는 일이 없도록 세심하게 주의해야 한다.
	변경사항에 대한 검증: 리팩토링과 테스트
메소드에 중복돼서 등장하는 특정 관심상항이 담긴 코드를 구조만 변경한다. 기능이 취가되거나 바뀐 것은 없지만 이전보다 훨씬 깔끔해졌고 미래의 변화에 좀 더 손쉽게 애응할 수 있는 코드가 됐다. 이런 작업을 리팩토링이라고 한다. 또한  동통의 기능을 담당하는 메소드로 중복된 코드를 뽑아내는 것을 리팩토링에서는 메소드 추출기법이라고 한다.
4.	상속을 통한 확장
N사와 D사가 각기 다른 종류의 DB를 사용하고 있고 DB커넥셕을 가져오는 데 있어 독자적으로 만든 방법을 적용하고 싵다면 getConnection()을 추상 메소드로 만들어 놓고 N,D사는 서브클래스를 만들고 getConnection() 메소드를 원하는 방식으로 확장한 하면 된다.
 슈퍼클래스에 기본적인 로직의 흐름을 만들고, 그 기늘의  일부를 추상메소드난 오버랑이딩이 가능한 Protected 메소드 등으로 만든 위 서블클래스에서 이런 메소드를 피요에 맞게 구현하서 사용 하도록 하는 방법을 디자인 패텐에서 테플릿 메소드 패턴이라고 한다.
서블 클래서에서 구체적인 오브텍트 생성 방버을 결정하게 하는 것을 팩토리 메소드 패턴이라고 한다.
이 방법은 사용했다는 단점이 있다. 자바 클래스의 다중상속을 허용하지 않는다, 단지 케넥션 객체를 가져호는 방법을 분리하기 휘해 상속구조로 만들어버리면, 후에 다른 목적을 UserDaodp 상속을 적용하기 힘들다. 또 다른 문제는 상속한 통한 상하의 클래스 관게가 밀접하다는 점이다. 서브클래스는 슈퍼 클래스의 기능 직접 사용할 수 있다.
